{"version":3,"sources":["arrow.png","typewriter.jpeg","feed.js","eth.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","canvas","ctx","width","height","g","grids","window","addEventListener","document","getElementById","getContext","i","createGrid","push","createCanvas","loop","x","y","this","clearRect","j","length","draw","update","requestAnimationFrame","prototype","beginPath","moveTo","lineTo","stroke","strokeStyle","App","className","src","logo","alt","id","class","contenteditable","typewriter","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,yGCA3C,IAAIC,EAAQC,EAAUC,EAAOC,EACzBC,EACHC,EAAQ,GAETC,OAAOC,iBAAiB,QAExB,YAKA,WACCP,EAASQ,SAASC,eAAe,UACjCP,EAAQ,IACRC,EAAS,IACTH,EAAOE,MAAQA,EACfF,EAAOG,OAASA,EAChBF,EAAMD,EAAOU,WAAW,MACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAMA,GAAK,GAC9BP,EAAI,IAAIQ,EAAW,EAAGD,GACtBN,EAAMQ,KAAKT,IAbZU,GACAC,OAJqC,GAoBtC,IAAIH,EAAa,SAASI,EAAGC,GAC5BC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,GAuBV,SAASF,IACRd,EAAIkB,UAAU,EAAG,EAAGjB,EAAOC,GAC3B,IAAK,IAAIiB,EAAI,EAAGA,EAAIf,EAAMgB,OAAQD,GAAK,EACnCA,EAAE,GAAK,IACTf,EAAMe,GAAGE,OACTjB,EAAMe,GAAGG,UAIXC,sBAAsBT,GAzBvBH,EAAWa,UAAUH,KAAO,WAC3BrB,EAAIyB,YACJzB,EAAI0B,OAAO,EAAGT,KAAKD,GACnBhB,EAAI2B,OAAO1B,EAAOgB,KAAKD,GACvBhB,EAAI4B,SACQ5B,EAAI6B,aAGjBlB,EAAWa,UAAUF,OAAS,WAC7BL,KAAKD,GAAK,GAENC,KAAKD,GAAKd,IACbe,KAAKD,GAAK,K,gBC7CZnB,EAAOC,QAAU,IAA0B,iC,0ICyB5BgC,MAff,WACE,OACE,yBAAKC,UAAU,OACV,yBAAKA,UAAU,WAAWC,IAAKC,IAAMC,IAAI,OAAOjC,MAAO,IAAKC,OAAQ,MACrE,4BAAQiC,GAAG,WACX,6BAASC,MAAM,wBACb,yBAAKA,MAAM,mBAAmBC,gBAAgB,QAA9C,8BAEF,yBAAKN,UAAU,cACb,yBAAKC,IAAKM,IAAYrC,MAAO,IAAKC,OAAQ,SCPhCqC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASC,eAAe,SDyHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a0e1c2c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.17a862c4.png\";","module.exports = __webpack_public_path__ + \"static/media/typewriter.2f60fbb1.jpeg\";","let canvas, ctx, img, width, height;\nlet g,\n\tgrids = [];\n\nwindow.addEventListener(\"load\", init, false);\n\nfunction init() {\n\tcreateCanvas();\n\tloop();\n}\n\nfunction createCanvas() {\n\tcanvas = document.getElementById(\"canvas\");\n\twidth = 668\n\theight = 400\n\tcanvas.width = width;\n\tcanvas.height = height;\n\tctx = canvas.getContext(\"2d\");\n\tfor (let i = 0; i < 5000; i += 10) {\n\t\tg = new createGrid(0, i);\n\t\tgrids.push(g);\n\t}\n}\n\nlet createGrid = function(x, y) {\n\tthis.x = x;\n\tthis.y = y;\n};\nlet color;\nlet gap = 0;\nlet lastcolor;\nlet arr = [];\n\ncreateGrid.prototype.draw = function() {\n\tctx.beginPath();\n\tctx.moveTo(0, this.y);\n\tctx.lineTo(width, this.y);\n\tctx.stroke();\n\tlastcolor = ctx.strokeStyle;\n};\n\ncreateGrid.prototype.update = function() {\n\tthis.y -= 0.5;\n\n\tif (this.y < -height) {\n\t\tthis.y = -5;\n\t}\n};\n\nfunction loop() {\n\tctx.clearRect(0, 0, width, height);\n\tfor (let j = 0; j < grids.length; j += 1) {\n\t\tif(j%7 == 0) {\n\t\t\tgrids[j].draw();\n\t\t\tgrids[j].update();\n\n\t\t}\n\t}\n\trequestAnimationFrame(loop);\n}\n","module.exports = __webpack_public_path__ + \"static/media/eth.1bd4a243.png\";","import React from 'react';\nimport './App.css';\nimport './glitch.css';\n\nimport './feed.js'\n\nimport logo from './arrow.png'\nimport eth from './eth.png'\nimport typewriter from './typewriter.jpeg'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         <img className=\"App-logo\" src={logo} alt=\"logo\" width={200} height={200}/>\n        <canvas id='canvas'></canvas>\n        <section class=\"portfolio-experiment\">\n          <div class=\"experiment-title\" contenteditable=\"true\">write alternative futures</div>\n        </section>\n        <div className=\"typewriter\">\n          <img src={typewriter} width={350} height={350}/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}